man -k (Command name of command discription)	to check manual of commands and 
date	
cat 	
Input and Output	
Standard Input (stdin)	Channel 0, typically originating from the keyboard, provides input to commands.
Standard Output (stdout)	Channel 1, typically directed to the terminal screen, displays the normal output of commands.
Standard Error (stderr)	Channel 2, also typically directed to the terminal screen, displays error messages generated by commands.
Command Arguments	Not a data stream, (e.g command:- cal -A 1 -B 1 12 2025)
Redirection - Standard output	cat 1>> output.txt
tty	where the  terminal is located
cat 0<input.txt > /dev/pts/1	to send  output in another terminal
date | cut date.txt --delimiter=" " --fields=1	"Piping date command and cut the data columns by additional cut command
Piping in used to redirect the output of 1 command to input of second command"
tee	"The tee command in Linux is used to take input and split it into two streams:
Send it to the terminal (stdout) so you can still see it.
Save it to a file (or multiple files)."
date | tee fulldate.txt |cut --delimiter " " --fields 1	
xargs	It takes input (usually from a pipe or file) and converts it into arguments for another command.
cat input.txt | xargs rm input.txt	
cat input.txt | xargs rm input.txt	
alias	"An alias is a shortcut for a longer command.
Instead of typing a long command every time, you define an alias and use it like a custom command."
alias firstdate='date | tee /home/ubuntu/firstdate.txt | cut --delimiter=" " --fields=1 | tee /home/ubuntu/shortdate | xargs echo hello'	
ls 	List files and directories
ls -a 	List all files including hidden
cd 	Change directory
Absolute path 	Full path from /
Relative path 	Path relative to current directory
. 	Current directory
.. 	Parent directory
ls *.txt 	List files ending with .txt
ls ??.txt 	Files with exactly 2 characters before .txt
ls file[0-9].txt 	Files file0.txt … file9.txt
ls file[A-Z][a-z][0-9].txt 	Pattern with uppercase, lowercase, digit
touch file.txt 	Create empty file or update timestamp
mkdir dir 	Create directory
mkdir -p path/to/dir 	Create nested directories
mkdir {jan,feb,mar,april}_{2021..2025} 	Create multiple directories
touch {jan,feb,mar,april}_{2021..2025}/file{1..100} 	Create 100 files in each dir
rm file1.txt 	Remove file
rm *txt 	Remove all .txt files
rm *2* 	Remove files containing 2
rm *[2,3]* 	Remove files containing 2 or 3
rm -r dir 	Remove directory recursively
rm -ri dir 	Remove recursively with confirmation
rmdir dir 	Remove empty directory
cp file1 file2 	Copy file
cp -r dir1 dir2 	Copy directory recursively
mv file1 file2 	Move or rename file
nano file.txt 	Edit file in nano editor
locate name 	Find files by name (uses index)
locate -i name 	Case-insensitive search
locate -i --limit 3 name 	Limit results to 3
locate --existing --follow *.conf 	Existing files, follow symlinks
find /home/user 	Find everything in /home/user
find . -maxdepth 4 	Search up to 4 levels
find . -type f 	Find files only
find . -type d 	Find directories only
find . -maxdepth 4 -type d 	Find directories up to 4 levels
find . -maxdepth 4 -name "*.txt" 	Find .txt files
find . -maxdepth 4 -name "?.txt" 	Find 1-character .txt files
find . -maxdepth 4 -iname "?.TXT" 	Case-insensitive match
find / -type f -size +100k | wc -l 	Count files >100 KB
find / -type f -size +100k -size -5M | wc -l 	Count files 100 KB–5 MB
find / -type f -size +100k -size -5M -exec cp {} /home/user/copy_here \; 	Copy found files
find / -type f -size +100k -size -5M -ok cp {} /home/user/copy_here \; 	Copy with confirmation
cat file[1..5].txt > output.txt 	Combine into output.txt
cat file[1..5].txt | tac > reversed.txt 	Reverse lines and save
less file.txt 	View file with scrolling
find | less 	Pipe results into pager
head file.txt 	Show first 10 lines
tail file.txt 	Show last 10 lines
head -n /etc/cups/cups-browsed.conf | tail -n -2 	Show all but last 2 lines
sort file.txt 	Sort alphabetically
sort -r file.txt 	Sort reverse order
sort -u file.txt 	Sort and remove duplicates
